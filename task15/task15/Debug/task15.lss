
task15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000db2  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000169e  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009aa  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000108e  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ca  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017a2  00000000  00000000  000049b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00006154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ee 04 	call	0x9dc	; 0x9dc <main>
  7a:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enumSetPinDirection>:
	else
	{
		LOC_enumState = DIO_NOK ;
	}
	return LOC_enumState;
}
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_enumSetPinDirection+0x6>
  86:	7b c0       	rjmp	.+246    	; 0x17e <DIO_enumSetPinDirection+0xfc>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_enumSetPinDirection+0xc>
  8c:	7a c0       	rjmp	.+244    	; 0x182 <DIO_enumSetPinDirection+0x100>
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	c1 f5       	brne	.+112    	; 0x102 <DIO_enumSetPinDirection+0x80>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	91 f0       	breq	.+36     	; 0xba <DIO_enumSetPinDirection+0x38>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_enumSetPinDirection+0x20>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	d9 f0       	breq	.+54     	; 0xd2 <DIO_enumSetPinDirection+0x50>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	29 f1       	breq	.+74     	; 0xea <DIO_enumSetPinDirection+0x68>
  a0:	72 c0       	rjmp	.+228    	; 0x186 <DIO_enumSetPinDirection+0x104>
  a2:	2a b3       	in	r18, 0x1a	; 26
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_enumSetPinDirection+0x2c>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_enumSetPinDirection+0x28>
  b2:	82 2b       	or	r24, r18
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_enumSetPinDirection+0x44>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_enumSetPinDirection+0x40>
  ca:	82 2b       	or	r24, r18
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
  d2:	24 b3       	in	r18, 0x14	; 20
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_enumSetPinDirection+0x5c>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_enumSetPinDirection+0x58>
  e2:	82 2b       	or	r24, r18
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	21 b3       	in	r18, 0x11	; 17
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_enumSetPinDirection+0x74>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_enumSetPinDirection+0x70>
  fa:	82 2b       	or	r24, r18
  fc:	81 bb       	out	0x11, r24	; 17
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
 102:	41 11       	cpse	r20, r1
 104:	42 c0       	rjmp	.+132    	; 0x18a <DIO_enumSetPinDirection+0x108>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	99 f0       	breq	.+38     	; 0x130 <DIO_enumSetPinDirection+0xae>
 10a:	28 f0       	brcs	.+10     	; 0x116 <DIO_enumSetPinDirection+0x94>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	e9 f0       	breq	.+58     	; 0x14a <DIO_enumSetPinDirection+0xc8>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	41 f1       	breq	.+80     	; 0x164 <DIO_enumSetPinDirection+0xe2>
 114:	3c c0       	rjmp	.+120    	; 0x18e <DIO_enumSetPinDirection+0x10c>
 116:	2a b3       	in	r18, 0x1a	; 26
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_enumSetPinDirection+0xa0>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_enumSetPinDirection+0x9c>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
 130:	27 b3       	in	r18, 0x17	; 23
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_enumSetPinDirection+0xba>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_enumSetPinDirection+0xb6>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
 14a:	24 b3       	in	r18, 0x14	; 20
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_enumSetPinDirection+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_enumSetPinDirection+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	84 bb       	out	0x14, r24	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	08 95       	ret
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_enumSetPinDirection+0xee>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_enumSetPinDirection+0xea>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret

00000192 <DIO_enumSetPinValue>:
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	08 f0       	brcs	.+2      	; 0x198 <DIO_enumSetPinValue+0x6>
 196:	7b c0       	rjmp	.+246    	; 0x28e <DIO_enumSetPinValue+0xfc>
 198:	68 30       	cpi	r22, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_enumSetPinValue+0xc>
 19c:	7a c0       	rjmp	.+244    	; 0x292 <DIO_enumSetPinValue+0x100>
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	c1 f5       	brne	.+112    	; 0x212 <DIO_enumSetPinValue+0x80>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 f0       	breq	.+36     	; 0x1ca <DIO_enumSetPinValue+0x38>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_enumSetPinValue+0x20>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	d9 f0       	breq	.+54     	; 0x1e2 <DIO_enumSetPinValue+0x50>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	29 f1       	breq	.+74     	; 0x1fa <DIO_enumSetPinValue+0x68>
 1b0:	72 c0       	rjmp	.+228    	; 0x296 <DIO_enumSetPinValue+0x104>
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_enumSetPinValue+0x2c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_enumSetPinValue+0x28>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_enumSetPinValue+0x44>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_enumSetPinValue+0x40>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	08 95       	ret
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enumSetPinValue+0x5c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enumSetPinValue+0x58>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
 1fa:	22 b3       	in	r18, 0x12	; 18
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_enumSetPinValue+0x74>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_enumSetPinValue+0x70>
 20a:	82 2b       	or	r24, r18
 20c:	82 bb       	out	0x12, r24	; 18
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret
 212:	41 11       	cpse	r20, r1
 214:	42 c0       	rjmp	.+132    	; 0x29a <DIO_enumSetPinValue+0x108>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	99 f0       	breq	.+38     	; 0x240 <DIO_enumSetPinValue+0xae>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_enumSetPinValue+0x94>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	e9 f0       	breq	.+58     	; 0x25a <DIO_enumSetPinValue+0xc8>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	41 f1       	breq	.+80     	; 0x274 <DIO_enumSetPinValue+0xe2>
 224:	3c c0       	rjmp	.+120    	; 0x29e <DIO_enumSetPinValue+0x10c>
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_enumSetPinValue+0xa0>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_enumSetPinValue+0x9c>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_enumSetPinValue+0xba>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_enumSetPinValue+0xb6>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	25 b3       	in	r18, 0x15	; 21
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_enumSetPinValue+0xd4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_enumSetPinValue+0xd0>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_enumSetPinValue+0xee>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_enumSetPinValue+0xea>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	82 bb       	out	0x12, r24	; 18
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	08 95       	ret

000002a2 <DIO_enumGetPinValue>:
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <DIO_enumGetPinValue+0x6>
 2a6:	68 c0       	rjmp	.+208    	; 0x378 <DIO_enumGetPinValue+0xd6>
 2a8:	68 30       	cpi	r22, 0x08	; 8
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <DIO_enumGetPinValue+0xc>
 2ac:	67 c0       	rjmp	.+206    	; 0x37c <DIO_enumGetPinValue+0xda>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	f1 f0       	breq	.+60     	; 0x2ee <DIO_enumGetPinValue+0x4c>
 2b2:	30 f0       	brcs	.+12     	; 0x2c0 <DIO_enumGetPinValue+0x1e>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	91 f1       	breq	.+100    	; 0x31c <DIO_enumGetPinValue+0x7a>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	09 f4       	brne	.+2      	; 0x2be <DIO_enumGetPinValue+0x1c>
 2bc:	46 c0       	rjmp	.+140    	; 0x34a <DIO_enumGetPinValue+0xa8>
 2be:	60 c0       	rjmp	.+192    	; 0x380 <DIO_enumGetPinValue+0xde>
 2c0:	79 b3       	in	r23, 0x19	; 25
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	9c 01       	movw	r18, r24
 2c8:	06 2e       	mov	r0, r22
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_enumGetPinValue+0x2e>
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_enumGetPinValue+0x2a>
 2d4:	87 2f       	mov	r24, r23
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	82 23       	and	r24, r18
 2da:	93 23       	and	r25, r19
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_enumGetPinValue+0x40>
 2de:	95 95       	asr	r25
 2e0:	87 95       	ror	r24
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_enumGetPinValue+0x3c>
 2e6:	fa 01       	movw	r30, r20
 2e8:	80 83       	st	Z, r24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	08 95       	ret
 2ee:	76 b3       	in	r23, 0x16	; 22
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9c 01       	movw	r18, r24
 2f6:	06 2e       	mov	r0, r22
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_enumGetPinValue+0x5c>
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_enumGetPinValue+0x58>
 302:	87 2f       	mov	r24, r23
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	82 23       	and	r24, r18
 308:	93 23       	and	r25, r19
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_enumGetPinValue+0x6e>
 30c:	95 95       	asr	r25
 30e:	87 95       	ror	r24
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_enumGetPinValue+0x6a>
 314:	fa 01       	movw	r30, r20
 316:	80 83       	st	Z, r24
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
 31c:	73 b3       	in	r23, 0x13	; 19
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9c 01       	movw	r18, r24
 324:	06 2e       	mov	r0, r22
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_enumGetPinValue+0x8a>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_enumGetPinValue+0x86>
 330:	87 2f       	mov	r24, r23
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	82 23       	and	r24, r18
 336:	93 23       	and	r25, r19
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_enumGetPinValue+0x9c>
 33a:	95 95       	asr	r25
 33c:	87 95       	ror	r24
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_enumGetPinValue+0x98>
 342:	fa 01       	movw	r30, r20
 344:	80 83       	st	Z, r24
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
 34a:	70 b3       	in	r23, 0x10	; 16
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	9c 01       	movw	r18, r24
 352:	06 2e       	mov	r0, r22
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_enumGetPinValue+0xb8>
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_enumGetPinValue+0xb4>
 35e:	87 2f       	mov	r24, r23
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	82 23       	and	r24, r18
 364:	93 23       	and	r25, r19
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_enumGetPinValue+0xca>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_enumGetPinValue+0xc6>
 370:	fa 01       	movw	r30, r20
 372:	80 83       	st	Z, r24
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	08 95       	ret
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret

00000384 <DIO_enumConnectPullup>:

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	08 f0       	brcs	.+2      	; 0x38a <DIO_enumConnectPullup+0x6>
 388:	99 c0       	rjmp	.+306    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 38a:	68 30       	cpi	r22, 0x08	; 8
 38c:	08 f0       	brcs	.+2      	; 0x390 <DIO_enumConnectPullup+0xc>
 38e:	98 c0       	rjmp	.+304    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
	{
		switch(Copy_u8PORT)
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	59 f1       	breq	.+86     	; 0x3ea <DIO_enumConnectPullup+0x66>
 394:	38 f0       	brcs	.+14     	; 0x3a4 <DIO_enumConnectPullup+0x20>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	09 f4       	brne	.+2      	; 0x39c <DIO_enumConnectPullup+0x18>
 39a:	4a c0       	rjmp	.+148    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 39c:	83 30       	cpi	r24, 0x03	; 3
 39e:	09 f4       	brne	.+2      	; 0x3a2 <DIO_enumConnectPullup+0x1e>
 3a0:	6a c0       	rjmp	.+212    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3a2:	90 c0       	rjmp	.+288    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		{
			case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	a1 f4       	brne	.+40     	; 0x3d0 <DIO_enumConnectPullup+0x4c>
			{
				CLR_BIT(SFIOR,PUD);
 3a8:	80 b7       	in	r24, 0x30	; 48
 3aa:	8b 7f       	andi	r24, 0xFB	; 251
 3ac:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRA_Register,Copy_u8PIN);
 3ae:	2a b3       	in	r18, 0x1a	; 26
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_enumConnectPullup+0x36>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_enumConnectPullup+0x32>
 3be:	98 2f       	mov	r25, r24
 3c0:	90 95       	com	r25
 3c2:	92 23       	and	r25, r18
 3c4:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA_Register,Copy_u8PIN);
 3c6:	9b b3       	in	r25, 0x1b	; 27
 3c8:	89 2b       	or	r24, r25
 3ca:	8b bb       	out	0x1b, r24	; 27
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	08 95       	ret
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTA_Register,Copy_u8PIN); }
 3d0:	2b b3       	in	r18, 0x1b	; 27
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_enumConnectPullup+0x58>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_enumConnectPullup+0x54>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	8b bb       	out	0x1b, r24	; 27
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	08 95       	ret
				SET_BIT(PORTA_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTA_Register,Copy_u8PIN); }
			break;
			case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
 3ea:	41 30       	cpi	r20, 0x01	; 1
 3ec:	a1 f4       	brne	.+40     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				CLR_BIT(SFIOR,PUD);
 3ee:	80 b7       	in	r24, 0x30	; 48
 3f0:	8b 7f       	andi	r24, 0xFB	; 251
 3f2:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRB_Register,Copy_u8PIN);
 3f4:	27 b3       	in	r18, 0x17	; 23
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_enumConnectPullup+0x78>
 404:	98 2f       	mov	r25, r24
 406:	90 95       	com	r25
 408:	92 23       	and	r25, r18
 40a:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB_Register,Copy_u8PIN);
 40c:	98 b3       	in	r25, 0x18	; 24
 40e:	89 2b       	or	r24, r25
 410:	88 bb       	out	0x18, r24	; 24
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRB_Register,Copy_u8PIN);
				SET_BIT(PORTB_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTB_Register,Copy_u8PIN); }
 416:	28 b3       	in	r18, 0x18	; 24
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	80 95       	com	r24
 428:	82 23       	and	r24, r18
 42a:	88 bb       	out	0x18, r24	; 24
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret
				SET_BIT(PORTB_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTB_Register,Copy_u8PIN); }
			break;
			case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	a1 f4       	brne	.+40     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				CLR_BIT(SFIOR,PUD);
 434:	80 b7       	in	r24, 0x30	; 48
 436:	8b 7f       	andi	r24, 0xFB	; 251
 438:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRC_Register,Copy_u8PIN);
 43a:	24 b3       	in	r18, 0x14	; 20
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	98 2f       	mov	r25, r24
 44c:	90 95       	com	r25
 44e:	92 23       	and	r25, r18
 450:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC_Register,Copy_u8PIN);
 452:	95 b3       	in	r25, 0x15	; 21
 454:	89 2b       	or	r24, r25
 456:	85 bb       	out	0x15, r24	; 21
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRC_Register,Copy_u8PIN);
				SET_BIT(PORTC_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTC_Register,Copy_u8PIN); }
 45c:	25 b3       	in	r18, 0x15	; 21
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	80 95       	com	r24
 46e:	82 23       	and	r24, r18
 470:	85 bb       	out	0x15, r24	; 21
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	08 95       	ret
				SET_BIT(PORTC_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTC_Register,Copy_u8PIN); }
			break;
			case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
 476:	41 30       	cpi	r20, 0x01	; 1
 478:	a1 f4       	brne	.+40     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				CLR_BIT(SFIOR,PUD);
 47a:	80 b7       	in	r24, 0x30	; 48
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRD_Register,Copy_u8PIN);
 480:	21 b3       	in	r18, 0x11	; 17
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	98 2f       	mov	r25, r24
 492:	90 95       	com	r25
 494:	92 23       	and	r25, r18
 496:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD_Register,Copy_u8PIN);
 498:	92 b3       	in	r25, 0x12	; 18
 49a:	89 2b       	or	r24, r25
 49c:	82 bb       	out	0x12, r24	; 18
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	08 95       	ret
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else { CLR_BIT(PORTD_Register,Copy_u8PIN); }
 4a2:	22 b3       	in	r18, 0x12	; 18
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	80 95       	com	r24
 4b4:	82 23       	and	r24, r18
 4b6:	82 bb       	out	0x12, r24	; 18
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 95       	ret
			break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK ;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
	return LOC_enumState;
}

DIO_ErrorStatus DIO_enumConnectPullup(u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LOC_enumState = DIO_NOK ;
	}
	return LOC_enumState ;
}
 4c6:	08 95       	ret

000004c8 <DIO_enumSetPortDirection>:

DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
	if ( (Copy_u8PORT <= DIO_PORTD) )
 4c8:	84 30       	cpi	r24, 0x04	; 4
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <DIO_enumSetPortDirection+0x2c>
	{
		switch (Copy_u8PORT)
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	49 f0       	breq	.+18     	; 0x4e2 <DIO_enumSetPortDirection+0x1a>
 4d0:	28 f0       	brcs	.+10     	; 0x4dc <DIO_enumSetPortDirection+0x14>
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <DIO_enumSetPortDirection+0x20>
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	51 f0       	breq	.+20     	; 0x4ee <DIO_enumSetPortDirection+0x26>
 4da:	0e c0       	rjmp	.+28     	; 0x4f8 <DIO_enumSetPortDirection+0x30>
		{
			case DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
 4dc:	6a bb       	out	0x1a, r22	; 26
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4de:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= DIO_PORTD) )
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
 4e0:	08 95       	ret
			case DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
 4e2:	67 bb       	out	0x17, r22	; 23
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= DIO_PORTD) )
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
			case DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
 4e6:	08 95       	ret
			case DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
 4e8:	64 bb       	out	0x14, r22	; 20
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
			case DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
			case DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
 4ec:	08 95       	ret
			case DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
 4ee:	61 bb       	out	0x11, r22	; 17
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
			case DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
			case DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
			case DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
 4f2:	08 95       	ret
			default: LOC_enumState =  DIO_NOK; break;
		}
	}
	else { LOC_enumState = DIO_NOK; }
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret
		{
			case DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
			case DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
			case DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
			case DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
			default: LOC_enumState =  DIO_NOK; break;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else { LOC_enumState = DIO_NOK; }
	return LOC_enumState ;
}
 4fa:	08 95       	ret

000004fc <DIO_enumSetPortValue>:

DIO_ErrorStatus DIO_enumSetPortValue(u8 Copy_u8PORT , u8 Copy_u8Value )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
 4fc:	84 30       	cpi	r24, 0x04	; 4
 4fe:	a0 f4       	brcc	.+40     	; 0x528 <DIO_enumSetPortValue+0x2c>
	{
		switch (Copy_u8PORT)
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	49 f0       	breq	.+18     	; 0x516 <DIO_enumSetPortValue+0x1a>
 504:	28 f0       	brcs	.+10     	; 0x510 <DIO_enumSetPortValue+0x14>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	49 f0       	breq	.+18     	; 0x51c <DIO_enumSetPortValue+0x20>
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	51 f0       	breq	.+20     	; 0x522 <DIO_enumSetPortValue+0x26>
 50e:	0e c0       	rjmp	.+28     	; 0x52c <DIO_enumSetPortValue+0x30>
		{
			case DIO_PORTA: PORTA_Register = Copy_u8Value; break;
 510:	6b bb       	out	0x1b, r22	; 27
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortValue(u8 Copy_u8PORT , u8 Copy_u8Value )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 512:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: PORTA_Register = Copy_u8Value; break;
 514:	08 95       	ret
			case DIO_PORTB: PORTB_Register = Copy_u8Value; break;
 516:	68 bb       	out	0x18, r22	; 24
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortValue(u8 Copy_u8PORT , u8 Copy_u8Value )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 518:	81 e0       	ldi	r24, 0x01	; 1
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: PORTA_Register = Copy_u8Value; break;
			case DIO_PORTB: PORTB_Register = Copy_u8Value; break;
 51a:	08 95       	ret
			case DIO_PORTC: PORTC_Register = Copy_u8Value; break;
 51c:	65 bb       	out	0x15, r22	; 21
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortValue(u8 Copy_u8PORT , u8 Copy_u8Value )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 51e:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: PORTA_Register = Copy_u8Value; break;
			case DIO_PORTB: PORTB_Register = Copy_u8Value; break;
			case DIO_PORTC: PORTC_Register = Copy_u8Value; break;
 520:	08 95       	ret
			case DIO_PORTD: PORTD_Register = Copy_u8Value; break;
 522:	62 bb       	out	0x12, r22	; 18
	return LOC_enumState ;
}

DIO_ErrorStatus DIO_enumSetPortValue(u8 Copy_u8PORT , u8 Copy_u8Value )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 524:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: PORTA_Register = Copy_u8Value; break;
			case DIO_PORTB: PORTB_Register = Copy_u8Value; break;
			case DIO_PORTC: PORTC_Register = Copy_u8Value; break;
			case DIO_PORTD: PORTD_Register = Copy_u8Value; break;
 526:	08 95       	ret
			default: LOC_enumState = DIO_NOK; break;
		}
	}
	else { LOC_enumState = DIO_NOK; }
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
		{
			case DIO_PORTA: PORTA_Register = Copy_u8Value; break;
			case DIO_PORTB: PORTB_Register = Copy_u8Value; break;
			case DIO_PORTC: PORTC_Register = Copy_u8Value; break;
			case DIO_PORTD: PORTD_Register = Copy_u8Value; break;
			default: LOC_enumState = DIO_NOK; break;
 52c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else { LOC_enumState = DIO_NOK; }
	return LOC_enumState ;
}
 52e:	08 95       	ret

00000530 <KPD_Init>:

void KPD_Init(void){

	/*                    connect pull up for the pins of the rows                             */

	DIO_enumConnectPullup        ( KPD_PORT , KPD_R0 , DIO_PIN_HIGH );
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R1 , DIO_PIN_HIGH );
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R2 , DIO_PIN_HIGH );
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R3 , DIO_PIN_HIGH );
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	63 e0       	ldi	r22, 0x03	; 3
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_enumConnectPullup>


	/*                 connect the pins of the columns as output pins (HIGH)                    */


	DIO_enumSetPinDirection( KPD_PORT , KPD_C0 , DIO_PIN_OUTPUT );
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C1 , DIO_PIN_OUTPUT );
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	65 e0       	ldi	r22, 0x05	; 5
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C2 , DIO_PIN_OUTPUT );
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	66 e0       	ldi	r22, 0x06	; 6
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C3 , DIO_PIN_OUTPUT );
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	67 e0       	ldi	r22, 0x07	; 7
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue    ( KPD_PORT , KPD_C0 , DIO_PIN_HIGH );
 580:	41 e0       	ldi	r20, 0x01	; 1
 582:	64 e0       	ldi	r22, 0x04	; 4
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C1 , DIO_PIN_HIGH );
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	65 e0       	ldi	r22, 0x05	; 5
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C2 , DIO_PIN_HIGH );
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	66 e0       	ldi	r22, 0x06	; 6
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C3 , DIO_PIN_HIGH );
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	67 e0       	ldi	r22, 0x07	; 7
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 5a8:	08 95       	ret

000005aa <KPD_u8GetPressed>:

}

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8   KPD_u8GetPressed( void ){
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	1f 92       	push	r1
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
 5ba:	04 e0       	ldi	r16, 0x04	; 4

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8   KPD_u8GetPressed( void ){

	u8 LOC_u8ReturnData = NOTPRESSED ;
 5bc:	ff 24       	eor	r15, r15
 5be:	fa 94       	dec	r15
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
 5c0:	4e c0       	rjmp	.+156    	; 0x65e <KPD_u8GetPressed+0xb4>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	60 2f       	mov	r22, r16
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){
 5cc:	10 e0       	ldi	r17, 0x00	; 0
 5ce:	3e c0       	rjmp	.+124    	; 0x64c <KPD_u8GetPressed+0xa2>

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
 5d0:	ae 01       	movw	r20, r28
 5d2:	4f 5f       	subi	r20, 0xFF	; 255
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
 5d6:	61 2f       	mov	r22, r17
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	81 11       	cpse	r24, r1
 5e2:	33 c0       	rjmp	.+102    	; 0x64a <KPD_u8GetPressed+0xa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e4:	83 ed       	ldi	r24, 0xD3	; 211
 5e6:	90 e3       	ldi	r25, 0x30	; 48
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <KPD_u8GetPressed+0x3e>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <KPD_u8GetPressed+0x44>
 5ee:	00 00       	nop
			{

				_delay_ms(50);   // delay for bouncing

				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );   // to make sure that the button is pressed & check again
 5f0:	ae 01       	movw	r20, r28
 5f2:	4f 5f       	subi	r20, 0xFF	; 255
 5f4:	5f 4f       	sbci	r21, 0xFF	; 255
 5f6:	61 2f       	mov	r22, r17
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_enumGetPinValue>

				if( LOC_u8GetPressed == 0 )
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	81 11       	cpse	r24, r1
 602:	10 c0       	rjmp	.+32     	; 0x624 <KPD_u8GetPressed+0x7a>
					the button will khnow by the row and the column (ASCII Code)
					==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
					==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
					*/

					LOC_u8ReturnData = KPD_u8Buttons[ LOC_u8Row - KPD_ROW_INIT ][ LOC_u8Col - KPD_COL_INIT ];
 604:	81 2f       	mov	r24, r17
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	20 2f       	mov	r18, r16
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	24 50       	subi	r18, 0x04	; 4
 60e:	31 09       	sbc	r19, r1
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	80 5a       	subi	r24, 0xA0	; 160
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	fc 01       	movw	r30, r24
 61e:	e2 0f       	add	r30, r18
 620:	f3 1f       	adc	r31, r19
 622:	f0 80       	ld	r15, Z

				}

				// stay here if the button is pressed   # we could put delay 200 ms instead of that
				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
 624:	ae 01       	movw	r20, r28
 626:	4f 5f       	subi	r20, 0xFF	; 255
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	61 2f       	mov	r22, r17
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_enumGetPinValue>
				while( DIO_PIN_LOW == LOC_u8GetPressed ) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
 632:	07 c0       	rjmp	.+14     	; 0x642 <KPD_u8GetPressed+0x98>
				{

					DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
 634:	ae 01       	movw	r20, r28
 636:	4f 5f       	subi	r20, 0xFF	; 255
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	61 2f       	mov	r22, r17
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_enumGetPinValue>

				}

				// stay here if the button is pressed   # we could put delay 200 ms instead of that
				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
				while( DIO_PIN_LOW == LOC_u8GetPressed ) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	88 23       	and	r24, r24
 646:	b1 f3       	breq	.-20     	; 0x634 <KPD_u8GetPressed+0x8a>
 648:	04 c0       	rjmp	.+8      	; 0x652 <KPD_u8GetPressed+0xa8>

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){
 64a:	1f 5f       	subi	r17, 0xFF	; 255
 64c:	14 30       	cpi	r17, 0x04	; 4
 64e:	08 f4       	brcc	.+2      	; 0x652 <KPD_u8GetPressed+0xa8>
 650:	bf cf       	rjmp	.-130    	; 0x5d0 <KPD_u8GetPressed+0x26>
			}

		}

		// return this column’s pin to high
		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_HIGH );
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	60 2f       	mov	r22, r16
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
 65c:	0f 5f       	subi	r16, 0xFF	; 255
 65e:	08 30       	cpi	r16, 0x08	; 8
 660:	08 f4       	brcc	.+2      	; 0x664 <KPD_u8GetPressed+0xba>
 662:	af cf       	rjmp	.-162    	; 0x5c2 <KPD_u8GetPressed+0x18>

	}

	return LOC_u8ReturnData ;

}
 664:	8f 2d       	mov	r24, r15
 666:	0f 90       	pop	r0
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	ff 90       	pop	r15
 672:	08 95       	ret

00000674 <CLCD_voidSendFallingEdge>:
 674:	41 e0       	ldi	r20, 0x01	; 1
 676:	63 e0       	ldi	r22, 0x03	; 3
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 67e:	8f ec       	ldi	r24, 0xCF	; 207
 680:	97 e0       	ldi	r25, 0x07	; 7
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <CLCD_voidSendFallingEdge+0xe>
 686:	00 c0       	rjmp	.+0      	; 0x688 <CLCD_voidSendFallingEdge+0x14>
 688:	00 00       	nop
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	63 e0       	ldi	r22, 0x03	; 3
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 694:	8f ec       	ldi	r24, 0xCF	; 207
 696:	97 e0       	ldi	r25, 0x07	; 7
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <CLCD_voidSendFallingEdge+0x24>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <CLCD_voidSendFallingEdge+0x2a>
 69e:	00 00       	nop
 6a0:	08 95       	ret

000006a2 <CLCD_voidSendData>:
 6a2:	68 2f       	mov	r22, r24
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_enumSetPortValue>
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	62 e0       	ldi	r22, 0x02	; 2
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 6be:	0e 94 3a 03 	call	0x674	; 0x674 <CLCD_voidSendFallingEdge>
 6c2:	8f ec       	ldi	r24, 0xCF	; 207
 6c4:	97 e0       	ldi	r25, 0x07	; 7
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <CLCD_voidSendData+0x24>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <CLCD_voidSendData+0x2a>
 6cc:	00 00       	nop
 6ce:	08 95       	ret

000006d0 <CLCD_voidSendCommand>:
 6d0:	68 2f       	mov	r22, r24
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_enumSetPortValue>
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_enumSetPinValue>
 6ec:	0e 94 3a 03 	call	0x674	; 0x674 <CLCD_voidSendFallingEdge>
 6f0:	8f ec       	ldi	r24, 0xCF	; 207
 6f2:	97 e0       	ldi	r25, 0x07	; 7
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <CLCD_voidSendCommand+0x24>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <CLCD_voidSendCommand+0x2a>
 6fa:	00 00       	nop
 6fc:	08 95       	ret

000006fe <CLCD_voidSendString>:
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	8c 01       	movw	r16, r24
 706:	c0 e0       	ldi	r28, 0x00	; 0
 708:	03 c0       	rjmp	.+6      	; 0x710 <CLCD_voidSendString+0x12>
 70a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLCD_voidSendData>
 70e:	cf 5f       	subi	r28, 0xFF	; 255
 710:	f8 01       	movw	r30, r16
 712:	ec 0f       	add	r30, r28
 714:	f1 1d       	adc	r31, r1
 716:	80 81       	ld	r24, Z
 718:	81 11       	cpse	r24, r1
 71a:	f7 cf       	rjmp	.-18     	; 0x70a <CLCD_voidSendString+0xc>
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	08 95       	ret

00000724 <CLCD_voidSendNumber>:
 724:	2f 92       	push	r2
 726:	3f 92       	push	r3
 728:	4f 92       	push	r4
 72a:	5f 92       	push	r5
 72c:	6f 92       	push	r6
 72e:	7f 92       	push	r7
 730:	8f 92       	push	r8
 732:	9f 92       	push	r9
 734:	af 92       	push	r10
 736:	bf 92       	push	r11
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	28 97       	sbiw	r28, 0x08	; 8
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	29 83       	std	Y+1, r18	; 0x01
 75a:	3a 83       	std	Y+2, r19	; 0x02
 75c:	4b 83       	std	Y+3, r20	; 0x03
 75e:	5c 83       	std	Y+4, r21	; 0x04
 760:	6d 83       	std	Y+5, r22	; 0x05
 762:	7e 83       	std	Y+6, r23	; 0x06
 764:	38 2e       	mov	r3, r24
 766:	29 2e       	mov	r2, r25
 768:	a0 e0       	ldi	r26, 0x00	; 0
 76a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpdi2_s8>
 76e:	09 f0       	breq	.+2      	; 0x772 <CLCD_voidSendNumber+0x4e>
 770:	81 c0       	rjmp	.+258    	; 0x874 <__stack+0x15>
 772:	80 e3       	ldi	r24, 0x30	; 48
 774:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLCD_voidSendData>
 778:	cb c0       	rjmp	.+406    	; 0x910 <__stack+0xb1>
 77a:	2f 81       	ldd	r18, Y+7	; 0x07
 77c:	38 85       	ldd	r19, Y+8	; 0x08
 77e:	49 2d       	mov	r20, r9
 780:	58 2d       	mov	r21, r8
 782:	67 2d       	mov	r22, r7
 784:	76 2d       	mov	r23, r6
 786:	85 2d       	mov	r24, r5
 788:	94 2d       	mov	r25, r4
 78a:	01 e0       	ldi	r16, 0x01	; 1
 78c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__ashldi3>
 790:	82 2e       	mov	r8, r18
 792:	93 2e       	mov	r9, r19
 794:	48 87       	std	Y+8, r20	; 0x08
 796:	5f 83       	std	Y+7, r21	; 0x07
 798:	b6 2f       	mov	r27, r22
 79a:	a7 2f       	mov	r26, r23
 79c:	f8 2f       	mov	r31, r24
 79e:	e9 2f       	mov	r30, r25
 7a0:	02 e0       	ldi	r16, 0x02	; 2
 7a2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__ashldi3>
 7a6:	a2 2e       	mov	r10, r18
 7a8:	b3 2e       	mov	r11, r19
 7aa:	c4 2e       	mov	r12, r20
 7ac:	d5 2e       	mov	r13, r21
 7ae:	e6 2e       	mov	r14, r22
 7b0:	f7 2e       	mov	r15, r23
 7b2:	08 2f       	mov	r16, r24
 7b4:	19 2f       	mov	r17, r25
 7b6:	28 2d       	mov	r18, r8
 7b8:	39 2d       	mov	r19, r9
 7ba:	48 85       	ldd	r20, Y+8	; 0x08
 7bc:	5f 81       	ldd	r21, Y+7	; 0x07
 7be:	6b 2f       	mov	r22, r27
 7c0:	7a 2f       	mov	r23, r26
 7c2:	8f 2f       	mov	r24, r31
 7c4:	9e 2f       	mov	r25, r30
 7c6:	0e 94 91 06 	call	0xd22	; 0xd22 <__adddi3>
 7ca:	28 87       	std	Y+8, r18	; 0x08
 7cc:	3f 83       	std	Y+7, r19	; 0x07
 7ce:	94 2e       	mov	r9, r20
 7d0:	85 2e       	mov	r8, r21
 7d2:	76 2e       	mov	r7, r22
 7d4:	67 2e       	mov	r6, r23
 7d6:	58 2e       	mov	r5, r24
 7d8:	49 2e       	mov	r4, r25
 7da:	0f 2e       	mov	r0, r31
 7dc:	fa e0       	ldi	r31, 0x0A	; 10
 7de:	af 2e       	mov	r10, r31
 7e0:	f0 2d       	mov	r31, r0
 7e2:	b1 2c       	mov	r11, r1
 7e4:	c1 2c       	mov	r12, r1
 7e6:	d1 2c       	mov	r13, r1
 7e8:	e1 2c       	mov	r14, r1
 7ea:	f1 2c       	mov	r15, r1
 7ec:	00 e0       	ldi	r16, 0x00	; 0
 7ee:	10 e0       	ldi	r17, 0x00	; 0
 7f0:	29 81       	ldd	r18, Y+1	; 0x01
 7f2:	3a 81       	ldd	r19, Y+2	; 0x02
 7f4:	4b 81       	ldd	r20, Y+3	; 0x03
 7f6:	5c 81       	ldd	r21, Y+4	; 0x04
 7f8:	6d 81       	ldd	r22, Y+5	; 0x05
 7fa:	7e 81       	ldd	r23, Y+6	; 0x06
 7fc:	83 2d       	mov	r24, r3
 7fe:	92 2d       	mov	r25, r2
 800:	0e 94 19 06 	call	0xc32	; 0xc32 <__umoddi3>
 804:	a2 2e       	mov	r10, r18
 806:	b3 2e       	mov	r11, r19
 808:	c4 2e       	mov	r12, r20
 80a:	d5 2e       	mov	r13, r21
 80c:	e6 2e       	mov	r14, r22
 80e:	f7 2e       	mov	r15, r23
 810:	08 2f       	mov	r16, r24
 812:	19 2f       	mov	r17, r25
 814:	28 85       	ldd	r18, Y+8	; 0x08
 816:	3f 81       	ldd	r19, Y+7	; 0x07
 818:	49 2d       	mov	r20, r9
 81a:	58 2d       	mov	r21, r8
 81c:	67 2d       	mov	r22, r7
 81e:	76 2d       	mov	r23, r6
 820:	85 2d       	mov	r24, r5
 822:	94 2d       	mov	r25, r4
 824:	0e 94 91 06 	call	0xd22	; 0xd22 <__adddi3>
 828:	2f 83       	std	Y+7, r18	; 0x07
 82a:	38 87       	std	Y+8, r19	; 0x08
 82c:	94 2e       	mov	r9, r20
 82e:	85 2e       	mov	r8, r21
 830:	76 2e       	mov	r7, r22
 832:	67 2e       	mov	r6, r23
 834:	58 2e       	mov	r5, r24
 836:	49 2e       	mov	r4, r25
 838:	0f 2e       	mov	r0, r31
 83a:	fa e0       	ldi	r31, 0x0A	; 10
 83c:	af 2e       	mov	r10, r31
 83e:	f0 2d       	mov	r31, r0
 840:	b1 2c       	mov	r11, r1
 842:	c1 2c       	mov	r12, r1
 844:	d1 2c       	mov	r13, r1
 846:	e1 2c       	mov	r14, r1
 848:	f1 2c       	mov	r15, r1
 84a:	00 e0       	ldi	r16, 0x00	; 0
 84c:	10 e0       	ldi	r17, 0x00	; 0
 84e:	29 81       	ldd	r18, Y+1	; 0x01
 850:	3a 81       	ldd	r19, Y+2	; 0x02
 852:	4b 81       	ldd	r20, Y+3	; 0x03
 854:	5c 81       	ldd	r21, Y+4	; 0x04
 856:	6d 81       	ldd	r22, Y+5	; 0x05
 858:	7e 81       	ldd	r23, Y+6	; 0x06
 85a:	83 2d       	mov	r24, r3
 85c:	92 2d       	mov	r25, r2
 85e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__udivdi3>
 862:	29 83       	std	Y+1, r18	; 0x01
 864:	3a 83       	std	Y+2, r19	; 0x02
 866:	4b 83       	std	Y+3, r20	; 0x03
 868:	5c 83       	std	Y+4, r21	; 0x04
 86a:	6d 83       	std	Y+5, r22	; 0x05
 86c:	7e 83       	std	Y+6, r23	; 0x06
 86e:	38 2e       	mov	r3, r24
 870:	29 2e       	mov	r2, r25
 872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	18 86       	std	Y+8, r1	; 0x08
 878:	91 2c       	mov	r9, r1
 87a:	81 2c       	mov	r8, r1
 87c:	71 2c       	mov	r7, r1
 87e:	61 2c       	mov	r6, r1
 880:	51 2c       	mov	r5, r1
 882:	41 2c       	mov	r4, r1
 884:	8f 83       	std	Y+7, r24	; 0x07
 886:	29 81       	ldd	r18, Y+1	; 0x01
 888:	3a 81       	ldd	r19, Y+2	; 0x02
 88a:	4b 81       	ldd	r20, Y+3	; 0x03
 88c:	5c 81       	ldd	r21, Y+4	; 0x04
 88e:	6d 81       	ldd	r22, Y+5	; 0x05
 890:	7e 81       	ldd	r23, Y+6	; 0x06
 892:	83 2d       	mov	r24, r3
 894:	92 2d       	mov	r25, r2
 896:	a0 e0       	ldi	r26, 0x00	; 0
 898:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpdi2_s8>
 89c:	09 f0       	breq	.+2      	; 0x8a0 <__stack+0x41>
 89e:	6d cf       	rjmp	.-294    	; 0x77a <CLCD_voidSendNumber+0x56>
 8a0:	2b c0       	rjmp	.+86     	; 0x8f8 <__stack+0x99>
 8a2:	0f 2e       	mov	r0, r31
 8a4:	fa e0       	ldi	r31, 0x0A	; 10
 8a6:	af 2e       	mov	r10, r31
 8a8:	f0 2d       	mov	r31, r0
 8aa:	b1 2c       	mov	r11, r1
 8ac:	c1 2c       	mov	r12, r1
 8ae:	d1 2c       	mov	r13, r1
 8b0:	e1 2c       	mov	r14, r1
 8b2:	f1 2c       	mov	r15, r1
 8b4:	00 e0       	ldi	r16, 0x00	; 0
 8b6:	10 e0       	ldi	r17, 0x00	; 0
 8b8:	2f 81       	ldd	r18, Y+7	; 0x07
 8ba:	38 85       	ldd	r19, Y+8	; 0x08
 8bc:	49 2d       	mov	r20, r9
 8be:	58 2d       	mov	r21, r8
 8c0:	67 2d       	mov	r22, r7
 8c2:	76 2d       	mov	r23, r6
 8c4:	85 2d       	mov	r24, r5
 8c6:	94 2d       	mov	r25, r4
 8c8:	0e 94 19 06 	call	0xc32	; 0xc32 <__umoddi3>
 8cc:	80 e3       	ldi	r24, 0x30	; 48
 8ce:	82 0f       	add	r24, r18
 8d0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLCD_voidSendData>
 8d4:	2f 81       	ldd	r18, Y+7	; 0x07
 8d6:	38 85       	ldd	r19, Y+8	; 0x08
 8d8:	49 2d       	mov	r20, r9
 8da:	58 2d       	mov	r21, r8
 8dc:	67 2d       	mov	r22, r7
 8de:	76 2d       	mov	r23, r6
 8e0:	85 2d       	mov	r24, r5
 8e2:	94 2d       	mov	r25, r4
 8e4:	0e 94 1b 06 	call	0xc36	; 0xc36 <__udivdi3>
 8e8:	2f 83       	std	Y+7, r18	; 0x07
 8ea:	38 87       	std	Y+8, r19	; 0x08
 8ec:	94 2e       	mov	r9, r20
 8ee:	85 2e       	mov	r8, r21
 8f0:	76 2e       	mov	r7, r22
 8f2:	67 2e       	mov	r6, r23
 8f4:	58 2e       	mov	r5, r24
 8f6:	49 2e       	mov	r4, r25
 8f8:	2f 81       	ldd	r18, Y+7	; 0x07
 8fa:	38 85       	ldd	r19, Y+8	; 0x08
 8fc:	49 2d       	mov	r20, r9
 8fe:	58 2d       	mov	r21, r8
 900:	67 2d       	mov	r22, r7
 902:	76 2d       	mov	r23, r6
 904:	85 2d       	mov	r24, r5
 906:	94 2d       	mov	r25, r4
 908:	a1 e0       	ldi	r26, 0x01	; 1
 90a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpdi2_s8>
 90e:	49 f6       	brne	.-110    	; 0x8a2 <__stack+0x43>
 910:	28 96       	adiw	r28, 0x08	; 8
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	de bf       	out	0x3e, r29	; 62
 918:	0f be       	out	0x3f, r0	; 63
 91a:	cd bf       	out	0x3d, r28	; 61
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	df 90       	pop	r13
 92a:	cf 90       	pop	r12
 92c:	bf 90       	pop	r11
 92e:	af 90       	pop	r10
 930:	9f 90       	pop	r9
 932:	8f 90       	pop	r8
 934:	7f 90       	pop	r7
 936:	6f 90       	pop	r6
 938:	5f 90       	pop	r5
 93a:	4f 90       	pop	r4
 93c:	3f 90       	pop	r3
 93e:	2f 90       	pop	r2
 940:	08 95       	ret

00000942 <CLCD_voidClearScreen>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 68 03 	call	0x6d0	; 0x6d0 <CLCD_voidSendCommand>
 948:	8f e1       	ldi	r24, 0x1F	; 31
 94a:	9e e4       	ldi	r25, 0x4E	; 78
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <CLCD_voidClearScreen+0xa>
 950:	00 c0       	rjmp	.+0      	; 0x952 <CLCD_voidClearScreen+0x10>
 952:	00 00       	nop
 954:	08 95       	ret

00000956 <CLCD_voidInit>:
 956:	2f e7       	ldi	r18, 0x7F	; 127
 958:	88 e3       	ldi	r24, 0x38	; 56
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	21 50       	subi	r18, 0x01	; 1
 95e:	80 40       	sbci	r24, 0x00	; 0
 960:	90 40       	sbci	r25, 0x00	; 0
 962:	e1 f7       	brne	.-8      	; 0x95c <CLCD_voidInit+0x6>
 964:	00 c0       	rjmp	.+0      	; 0x966 <CLCD_voidInit+0x10>
 966:	00 00       	nop
	
	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);
	
	// All Pins as OutPut pins
	DIO_enumSetPortDirection ( CLCD_DATA_PORT    , DIO_PORT_OUTPUT           );
 968:	6f ef       	ldi	r22, 0xFF	; 255
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <DIO_enumSetPortDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
 970:	41 e0       	ldi	r20, 0x01	; 1
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
 97a:	41 e0       	ldi	r20, 0x01	; 1
 97c:	62 e0       	ldi	r22, 0x02	; 2
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	63 e0       	ldi	r22, 0x03	; 3
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPinDirection>
	
	/* Return cursor to the first position on the first line  */
	CLCD_voidSendCommand(lcd_Home);
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	0e 94 68 03 	call	0x6d0	; 0x6d0 <CLCD_voidSendCommand>
 994:	8f ec       	ldi	r24, 0xCF	; 207
 996:	97 e0       	ldi	r25, 0x07	; 7
 998:	01 97       	sbiw	r24, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <CLCD_voidInit+0x42>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <CLCD_voidInit+0x48>
 99e:	00 00       	nop
	_delay_ms(1);
	
	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	CLCD_voidSendCommand( EIGHT_BITS ); // 8 Bit Mode ==> 0x38
 9a0:	88 e3       	ldi	r24, 0x38	; 56
 9a2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <CLCD_voidSendCommand>
 9a6:	8f ec       	ldi	r24, 0xCF	; 207
 9a8:	97 e0       	ldi	r25, 0x07	; 7
 9aa:	01 97       	sbiw	r24, 0x01	; 1
 9ac:	f1 f7       	brne	.-4      	; 0x9aa <CLCD_voidInit+0x54>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <CLCD_voidInit+0x5a>
 9b0:	00 00       	nop
	_delay_ms(1); // wait more than 39 Ms
	
	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( lcd_DisplayOn_CursorOff );
 9b2:	8c e0       	ldi	r24, 0x0C	; 12
 9b4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <CLCD_voidSendCommand>
 9b8:	8f ec       	ldi	r24, 0xCF	; 207
 9ba:	97 e0       	ldi	r25, 0x07	; 7
 9bc:	01 97       	sbiw	r24, 0x01	; 1
 9be:	f1 f7       	brne	.-4      	; 0x9bc <CLCD_voidInit+0x66>
 9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <CLCD_voidInit+0x6c>
 9c2:	00 00       	nop
	_delay_ms(1);
	
	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
 9c4:	0e 94 a1 04 	call	0x942	; 0x942 <CLCD_voidClearScreen>
	
	/* ENTRY MODE  SET*/
	CLCD_voidSendCommand( lcd_EntryMode );
 9c8:	86 e0       	ldi	r24, 0x06	; 6
 9ca:	0e 94 68 03 	call	0x6d0	; 0x6d0 <CLCD_voidSendCommand>
 9ce:	8f ec       	ldi	r24, 0xCF	; 207
 9d0:	97 e0       	ldi	r25, 0x07	; 7
 9d2:	01 97       	sbiw	r24, 0x01	; 1
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <CLCD_voidInit+0x7c>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <CLCD_voidInit+0x82>
 9d8:	00 00       	nop
 9da:	08 95       	ret

000009dc <main>:
#include <util/delay.h>

int main(void)
{
	/* Initialization */
	CLCD_voidInit();
 9dc:	0e 94 ab 04 	call	0x956	; 0x956 <CLCD_voidInit>
	KPD_Init();
 9e0:	0e 94 98 02 	call	0x530	; 0x530 <KPD_Init>
	u8 key;
	s32 operand1 = 0, operand2 = 0, result = 0;
	u8 operator = 0;
	u8 enteringSecondOperand = 0;

	CLCD_voidSendString((u8*)"Calculator ^__^");
 9e4:	80 e7       	ldi	r24, 0x70	; 112
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <CLCD_voidSendString>
 9ec:	2f e3       	ldi	r18, 0x3F	; 63
 9ee:	8d e0       	ldi	r24, 0x0D	; 13
 9f0:	93 e0       	ldi	r25, 0x03	; 3
 9f2:	21 50       	subi	r18, 0x01	; 1
 9f4:	80 40       	sbci	r24, 0x00	; 0
 9f6:	90 40       	sbci	r25, 0x00	; 0
 9f8:	e1 f7       	brne	.-8      	; 0x9f2 <main+0x16>
 9fa:	00 c0       	rjmp	.+0      	; 0x9fc <main+0x20>
 9fc:	00 00       	nop
	_delay_ms(1000);
	CLCD_voidClearScreen();
 9fe:	0e 94 a1 04 	call	0x942	; 0x942 <CLCD_voidClearScreen>
	KPD_Init();

	u8 key;
	s32 operand1 = 0, operand2 = 0, result = 0;
	u8 operator = 0;
	u8 enteringSecondOperand = 0;
 a02:	d0 e0       	ldi	r29, 0x00	; 0
	CLCD_voidInit();
	KPD_Init();

	u8 key;
	s32 operand1 = 0, operand2 = 0, result = 0;
	u8 operator = 0;
 a04:	c0 e0       	ldi	r28, 0x00	; 0
	/* Initialization */
	CLCD_voidInit();
	KPD_Init();

	u8 key;
	s32 operand1 = 0, operand2 = 0, result = 0;
 a06:	81 2c       	mov	r8, r1
 a08:	91 2c       	mov	r9, r1
 a0a:	54 01       	movw	r10, r8
 a0c:	41 2c       	mov	r4, r1
 a0e:	51 2c       	mov	r5, r1
 a10:	32 01       	movw	r6, r4
 a12:	c1 2c       	mov	r12, r1
 a14:	d1 2c       	mov	r13, r1
 a16:	76 01       	movw	r14, r12
	_delay_ms(1000);
	CLCD_voidClearScreen();

	while (1)
	{
		key = KPD_u8GetPressed();
 a18:	0e 94 d5 02 	call	0x5aa	; 0x5aa <KPD_u8GetPressed>
 a1c:	18 2f       	mov	r17, r24

		if (key != NOTPRESSED)
 a1e:	8f 3f       	cpi	r24, 0xFF	; 255
 a20:	d9 f3       	breq	.-10     	; 0xa18 <main+0x3c>
		{
			/* === Digits === */
			if (key >= '0' && key <= '9')
 a22:	80 ed       	ldi	r24, 0xD0	; 208
 a24:	81 0f       	add	r24, r17
 a26:	8a 30       	cpi	r24, 0x0A	; 10
 a28:	08 f0       	brcs	.+2      	; 0xa2c <main+0x50>
 a2a:	42 c0       	rjmp	.+132    	; 0xab0 <main+0xd4>
			{
				CLCD_voidSendData(key);
 a2c:	81 2f       	mov	r24, r17
 a2e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLCD_voidSendData>

				if (!enteringSecondOperand)
 a32:	d1 11       	cpse	r29, r1
 a34:	1e c0       	rjmp	.+60     	; 0xa72 <main+0x96>
				{
					operand1 = operand1 * 10 + (key - '0');
 a36:	cc 0c       	add	r12, r12
 a38:	dd 1c       	adc	r13, r13
 a3a:	ee 1c       	adc	r14, r14
 a3c:	ff 1c       	adc	r15, r15
 a3e:	d7 01       	movw	r26, r14
 a40:	c6 01       	movw	r24, r12
 a42:	88 0f       	add	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	aa 1f       	adc	r26, r26
 a48:	bb 1f       	adc	r27, r27
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	aa 1f       	adc	r26, r26
 a50:	bb 1f       	adc	r27, r27
 a52:	c8 0e       	add	r12, r24
 a54:	d9 1e       	adc	r13, r25
 a56:	ea 1e       	adc	r14, r26
 a58:	fb 1e       	adc	r15, r27
 a5a:	81 2f       	mov	r24, r17
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	c0 97       	sbiw	r24, 0x30	; 48
 a60:	09 2e       	mov	r0, r25
 a62:	00 0c       	add	r0, r0
 a64:	aa 0b       	sbc	r26, r26
 a66:	bb 0b       	sbc	r27, r27
 a68:	c8 0e       	add	r12, r24
 a6a:	d9 1e       	adc	r13, r25
 a6c:	ea 1e       	adc	r14, r26
 a6e:	fb 1e       	adc	r15, r27
 a70:	d3 cf       	rjmp	.-90     	; 0xa18 <main+0x3c>
				}
				else
				{
					operand2 = operand2 * 10 + (key - '0');
 a72:	44 0c       	add	r4, r4
 a74:	55 1c       	adc	r5, r5
 a76:	66 1c       	adc	r6, r6
 a78:	77 1c       	adc	r7, r7
 a7a:	b3 01       	movw	r22, r6
 a7c:	a2 01       	movw	r20, r4
 a7e:	44 0f       	add	r20, r20
 a80:	55 1f       	adc	r21, r21
 a82:	66 1f       	adc	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	44 0f       	add	r20, r20
 a88:	55 1f       	adc	r21, r21
 a8a:	66 1f       	adc	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	44 0e       	add	r4, r20
 a90:	55 1e       	adc	r5, r21
 a92:	66 1e       	adc	r6, r22
 a94:	77 1e       	adc	r7, r23
 a96:	41 2f       	mov	r20, r17
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	ca 01       	movw	r24, r20
 a9c:	c0 97       	sbiw	r24, 0x30	; 48
 a9e:	09 2e       	mov	r0, r25
 aa0:	00 0c       	add	r0, r0
 aa2:	aa 0b       	sbc	r26, r26
 aa4:	bb 0b       	sbc	r27, r27
 aa6:	48 0e       	add	r4, r24
 aa8:	59 1e       	adc	r5, r25
 aaa:	6a 1e       	adc	r6, r26
 aac:	7b 1e       	adc	r7, r27
 aae:	b4 cf       	rjmp	.-152    	; 0xa18 <main+0x3c>
				}
			}

			/* === Operators === */
			else if (key == '+' || key == '-' || key == '*' || key == '/')
 ab0:	1b 32       	cpi	r17, 0x2B	; 43
 ab2:	31 f0       	breq	.+12     	; 0xac0 <main+0xe4>
 ab4:	1d 32       	cpi	r17, 0x2D	; 45
 ab6:	21 f0       	breq	.+8      	; 0xac0 <main+0xe4>
 ab8:	1a 32       	cpi	r17, 0x2A	; 42
 aba:	11 f0       	breq	.+4      	; 0xac0 <main+0xe4>
 abc:	1f 32       	cpi	r17, 0x2F	; 47
 abe:	41 f4       	brne	.+16     	; 0xad0 <main+0xf4>
			{
				if (operator == 0) // prevent double operator press
 ac0:	c1 11       	cpse	r28, r1
 ac2:	aa cf       	rjmp	.-172    	; 0xa18 <main+0x3c>
				{
					CLCD_voidSendData(key);
 ac4:	81 2f       	mov	r24, r17
 ac6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLCD_voidSendData>
					operator = key;
 aca:	c1 2f       	mov	r28, r17
					enteringSecondOperand = 1;
 acc:	d1 e0       	ldi	r29, 0x01	; 1
 ace:	a4 cf       	rjmp	.-184    	; 0xa18 <main+0x3c>
				}
			}

			/* === Equal (=) === */
			else if (key == '=')
 ad0:	1d 33       	cpi	r17, 0x3D	; 61
 ad2:	09 f0       	breq	.+2      	; 0xad6 <main+0xfa>
 ad4:	63 c0       	rjmp	.+198    	; 0xb9c <main+0x1c0>
			{
				CLCD_voidSendData('=');
 ad6:	8d e3       	ldi	r24, 0x3D	; 61
 ad8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLCD_voidSendData>

				switch (operator)
 adc:	cb 32       	cpi	r28, 0x2B	; 43
 ade:	49 f0       	breq	.+18     	; 0xaf2 <main+0x116>
 ae0:	18 f4       	brcc	.+6      	; 0xae8 <main+0x10c>
 ae2:	ca 32       	cpi	r28, 0x2A	; 42
 ae4:	a1 f0       	breq	.+40     	; 0xb0e <main+0x132>
 ae6:	42 c0       	rjmp	.+132    	; 0xb6c <main+0x190>
 ae8:	cd 32       	cpi	r28, 0x2D	; 45
 aea:	51 f0       	breq	.+20     	; 0xb00 <main+0x124>
 aec:	cf 32       	cpi	r28, 0x2F	; 47
 aee:	c1 f0       	breq	.+48     	; 0xb20 <main+0x144>
 af0:	3d c0       	rjmp	.+122    	; 0xb6c <main+0x190>
				{
					case '+': result = operand1 + operand2; break;
 af2:	46 01       	movw	r8, r12
 af4:	57 01       	movw	r10, r14
 af6:	84 0c       	add	r8, r4
 af8:	95 1c       	adc	r9, r5
 afa:	a6 1c       	adc	r10, r6
 afc:	b7 1c       	adc	r11, r7
 afe:	36 c0       	rjmp	.+108    	; 0xb6c <main+0x190>
					case '-': result = operand1 - operand2; break;
 b00:	46 01       	movw	r8, r12
 b02:	57 01       	movw	r10, r14
 b04:	84 18       	sub	r8, r4
 b06:	95 08       	sbc	r9, r5
 b08:	a6 08       	sbc	r10, r6
 b0a:	b7 08       	sbc	r11, r7
 b0c:	2f c0       	rjmp	.+94     	; 0xb6c <main+0x190>
					case '*': result = operand1 * operand2; break;
 b0e:	a7 01       	movw	r20, r14
 b10:	96 01       	movw	r18, r12
 b12:	c3 01       	movw	r24, r6
 b14:	b2 01       	movw	r22, r4
 b16:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsi3>
 b1a:	4b 01       	movw	r8, r22
 b1c:	5c 01       	movw	r10, r24
 b1e:	26 c0       	rjmp	.+76     	; 0xb6c <main+0x190>
					case '/':
					if (operand2 != 0) result = operand1 / operand2;
 b20:	41 14       	cp	r4, r1
 b22:	51 04       	cpc	r5, r1
 b24:	61 04       	cpc	r6, r1
 b26:	71 04       	cpc	r7, r1
 b28:	49 f0       	breq	.+18     	; 0xb3c <main+0x160>
 b2a:	c7 01       	movw	r24, r14
 b2c:	b6 01       	movw	r22, r12
 b2e:	a3 01       	movw	r20, r6
 b30:	92 01       	movw	r18, r4
 b32:	0e 94 ef 05 	call	0xbde	; 0xbde <__divmodsi4>
 b36:	49 01       	movw	r8, r18
 b38:	5a 01       	movw	r10, r20
						operand1 = operand2 = result = 0;
						operator = 0;
						enteringSecondOperand = 0;
						continue;
					}
					break;
 b3a:	18 c0       	rjmp	.+48     	; 0xb6c <main+0x190>
					case '-': result = operand1 - operand2; break;
					case '*': result = operand1 * operand2; break;
					case '/':
					if (operand2 != 0) result = operand1 / operand2;
					else {
						CLCD_voidClearScreen();
 b3c:	0e 94 a1 04 	call	0x942	; 0x942 <CLCD_voidClearScreen>
						CLCD_voidSendString((u8*)"Error: Div 0");
 b40:	80 e8       	ldi	r24, 0x80	; 128
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	0e 94 7f 03 	call	0x6fe	; 0x6fe <CLCD_voidSendString>
 b48:	2f e7       	ldi	r18, 0x7F	; 127
 b4a:	8a e1       	ldi	r24, 0x1A	; 26
 b4c:	96 e0       	ldi	r25, 0x06	; 6
 b4e:	21 50       	subi	r18, 0x01	; 1
 b50:	80 40       	sbci	r24, 0x00	; 0
 b52:	90 40       	sbci	r25, 0x00	; 0
 b54:	e1 f7       	brne	.-8      	; 0xb4e <main+0x172>
 b56:	00 c0       	rjmp	.+0      	; 0xb58 <main+0x17c>
 b58:	00 00       	nop
						_delay_ms(2000);
						CLCD_voidClearScreen();
 b5a:	0e 94 a1 04 	call	0x942	; 0x942 <CLCD_voidClearScreen>
						operand1 = operand2 = result = 0;
 b5e:	53 01       	movw	r10, r6
 b60:	42 01       	movw	r8, r4
 b62:	73 01       	movw	r14, r6
 b64:	62 01       	movw	r12, r4
						operator = 0;
						enteringSecondOperand = 0;
 b66:	d0 e0       	ldi	r29, 0x00	; 0
						CLCD_voidClearScreen();
						CLCD_voidSendString((u8*)"Error: Div 0");
						_delay_ms(2000);
						CLCD_voidClearScreen();
						operand1 = operand2 = result = 0;
						operator = 0;
 b68:	c0 e0       	ldi	r28, 0x00	; 0
						enteringSecondOperand = 0;
						continue;
 b6a:	56 cf       	rjmp	.-340    	; 0xa18 <main+0x3c>
					}
					break;
				}

				CLCD_voidSendNumber(result);
 b6c:	28 2d       	mov	r18, r8
 b6e:	39 2d       	mov	r19, r9
 b70:	4a 2d       	mov	r20, r10
 b72:	5b 2d       	mov	r21, r11
 b74:	75 01       	movw	r14, r10
 b76:	64 01       	movw	r12, r8
 b78:	ff 0c       	add	r15, r15
 b7a:	cc 08       	sbc	r12, r12
 b7c:	dc 2c       	mov	r13, r12
 b7e:	76 01       	movw	r14, r12
 b80:	6c 2d       	mov	r22, r12
 b82:	7c 2d       	mov	r23, r12
 b84:	8c 2d       	mov	r24, r12
 b86:	9c 2d       	mov	r25, r12
 b88:	0e 94 92 03 	call	0x724	; 0x724 <CLCD_voidSendNumber>

				/* reset for next calculation */
				operand1 = result;
 b8c:	75 01       	movw	r14, r10
 b8e:	64 01       	movw	r12, r8
				operand2 = 0;
				operator = 0;
				enteringSecondOperand = 0;
 b90:	d0 e0       	ldi	r29, 0x00	; 0
				CLCD_voidSendNumber(result);

				/* reset for next calculation */
				operand1 = result;
				operand2 = 0;
				operator = 0;
 b92:	c0 e0       	ldi	r28, 0x00	; 0

				CLCD_voidSendNumber(result);

				/* reset for next calculation */
				operand1 = result;
				operand2 = 0;
 b94:	41 2c       	mov	r4, r1
 b96:	51 2c       	mov	r5, r1
 b98:	32 01       	movw	r6, r4
 b9a:	3e cf       	rjmp	.-388    	; 0xa18 <main+0x3c>
				operator = 0;
				enteringSecondOperand = 0;
			}

			/* === Clear (C) === */
			else if (key == 'C')
 b9c:	13 34       	cpi	r17, 0x43	; 67
 b9e:	09 f0       	breq	.+2      	; 0xba2 <main+0x1c6>
 ba0:	3b cf       	rjmp	.-394    	; 0xa18 <main+0x3c>
			{
				CLCD_voidClearScreen();
 ba2:	0e 94 a1 04 	call	0x942	; 0x942 <CLCD_voidClearScreen>
				operand1 = operand2 = result = 0;
				operator = 0;
				enteringSecondOperand = 0;
 ba6:	d0 e0       	ldi	r29, 0x00	; 0
			/* === Clear (C) === */
			else if (key == 'C')
			{
				CLCD_voidClearScreen();
				operand1 = operand2 = result = 0;
				operator = 0;
 ba8:	c0 e0       	ldi	r28, 0x00	; 0

			/* === Clear (C) === */
			else if (key == 'C')
			{
				CLCD_voidClearScreen();
				operand1 = operand2 = result = 0;
 baa:	81 2c       	mov	r8, r1
 bac:	91 2c       	mov	r9, r1
 bae:	54 01       	movw	r10, r8
 bb0:	41 2c       	mov	r4, r1
 bb2:	51 2c       	mov	r5, r1
 bb4:	32 01       	movw	r6, r4
 bb6:	c1 2c       	mov	r12, r1
 bb8:	d1 2c       	mov	r13, r1
 bba:	76 01       	movw	r14, r12
 bbc:	2d cf       	rjmp	.-422    	; 0xa18 <main+0x3c>

00000bbe <__mulsi3>:
 bbe:	db 01       	movw	r26, r22
 bc0:	8f 93       	push	r24
 bc2:	9f 93       	push	r25
 bc4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__muluhisi3>
 bc8:	bf 91       	pop	r27
 bca:	af 91       	pop	r26
 bcc:	a2 9f       	mul	r26, r18
 bce:	80 0d       	add	r24, r0
 bd0:	91 1d       	adc	r25, r1
 bd2:	a3 9f       	mul	r26, r19
 bd4:	90 0d       	add	r25, r0
 bd6:	b2 9f       	mul	r27, r18
 bd8:	90 0d       	add	r25, r0
 bda:	11 24       	eor	r1, r1
 bdc:	08 95       	ret

00000bde <__divmodsi4>:
 bde:	05 2e       	mov	r0, r21
 be0:	97 fb       	bst	r25, 7
 be2:	1e f4       	brtc	.+6      	; 0xbea <__divmodsi4+0xc>
 be4:	00 94       	com	r0
 be6:	0e 94 06 06 	call	0xc0c	; 0xc0c <__negsi2>
 bea:	57 fd       	sbrc	r21, 7
 bec:	07 d0       	rcall	.+14     	; 0xbfc <__divmodsi4_neg2>
 bee:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__udivmodsi4>
 bf2:	07 fc       	sbrc	r0, 7
 bf4:	03 d0       	rcall	.+6      	; 0xbfc <__divmodsi4_neg2>
 bf6:	4e f4       	brtc	.+18     	; 0xc0a <__divmodsi4_exit>
 bf8:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__negsi2>

00000bfc <__divmodsi4_neg2>:
 bfc:	50 95       	com	r21
 bfe:	40 95       	com	r20
 c00:	30 95       	com	r19
 c02:	21 95       	neg	r18
 c04:	3f 4f       	sbci	r19, 0xFF	; 255
 c06:	4f 4f       	sbci	r20, 0xFF	; 255
 c08:	5f 4f       	sbci	r21, 0xFF	; 255

00000c0a <__divmodsi4_exit>:
 c0a:	08 95       	ret

00000c0c <__negsi2>:
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__muluhisi3>:
 c1c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__umulhisi3>
 c20:	a5 9f       	mul	r26, r21
 c22:	90 0d       	add	r25, r0
 c24:	b4 9f       	mul	r27, r20
 c26:	90 0d       	add	r25, r0
 c28:	a4 9f       	mul	r26, r20
 c2a:	80 0d       	add	r24, r0
 c2c:	91 1d       	adc	r25, r1
 c2e:	11 24       	eor	r1, r1
 c30:	08 95       	ret

00000c32 <__umoddi3>:
 c32:	68 94       	set
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <__udivdi3_umoddi3>

00000c36 <__udivdi3>:
 c36:	e8 94       	clt

00000c38 <__udivdi3_umoddi3>:
 c38:	8f 92       	push	r8
 c3a:	9f 92       	push	r9
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	0e 94 27 06 	call	0xc4e	; 0xc4e <__udivmod64>
 c44:	df 91       	pop	r29
 c46:	cf 91       	pop	r28
 c48:	9f 90       	pop	r9
 c4a:	8f 90       	pop	r8
 c4c:	08 95       	ret

00000c4e <__udivmod64>:
 c4e:	88 24       	eor	r8, r8
 c50:	99 24       	eor	r9, r9
 c52:	f4 01       	movw	r30, r8
 c54:	e4 01       	movw	r28, r8
 c56:	b0 e4       	ldi	r27, 0x40	; 64
 c58:	9f 93       	push	r25
 c5a:	aa 27       	eor	r26, r26
 c5c:	9a 15       	cp	r25, r10
 c5e:	8b 04       	cpc	r8, r11
 c60:	9c 04       	cpc	r9, r12
 c62:	ed 05       	cpc	r30, r13
 c64:	fe 05       	cpc	r31, r14
 c66:	cf 05       	cpc	r28, r15
 c68:	d0 07       	cpc	r29, r16
 c6a:	a1 07       	cpc	r26, r17
 c6c:	98 f4       	brcc	.+38     	; 0xc94 <__udivmod64+0x46>
 c6e:	ad 2f       	mov	r26, r29
 c70:	dc 2f       	mov	r29, r28
 c72:	cf 2f       	mov	r28, r31
 c74:	fe 2f       	mov	r31, r30
 c76:	e9 2d       	mov	r30, r9
 c78:	98 2c       	mov	r9, r8
 c7a:	89 2e       	mov	r8, r25
 c7c:	98 2f       	mov	r25, r24
 c7e:	87 2f       	mov	r24, r23
 c80:	76 2f       	mov	r23, r22
 c82:	65 2f       	mov	r22, r21
 c84:	54 2f       	mov	r21, r20
 c86:	43 2f       	mov	r20, r19
 c88:	32 2f       	mov	r19, r18
 c8a:	22 27       	eor	r18, r18
 c8c:	b8 50       	subi	r27, 0x08	; 8
 c8e:	31 f7       	brne	.-52     	; 0xc5c <__udivmod64+0xe>
 c90:	bf 91       	pop	r27
 c92:	27 c0       	rjmp	.+78     	; 0xce2 <__udivmod64+0x94>
 c94:	1b 2e       	mov	r1, r27
 c96:	bf 91       	pop	r27
 c98:	bb 27       	eor	r27, r27
 c9a:	22 0f       	add	r18, r18
 c9c:	33 1f       	adc	r19, r19
 c9e:	44 1f       	adc	r20, r20
 ca0:	55 1f       	adc	r21, r21
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	88 1c       	adc	r8, r8
 cac:	99 1c       	adc	r9, r9
 cae:	ee 1f       	adc	r30, r30
 cb0:	ff 1f       	adc	r31, r31
 cb2:	cc 1f       	adc	r28, r28
 cb4:	dd 1f       	adc	r29, r29
 cb6:	aa 1f       	adc	r26, r26
 cb8:	bb 1f       	adc	r27, r27
 cba:	8a 14       	cp	r8, r10
 cbc:	9b 04       	cpc	r9, r11
 cbe:	ec 05       	cpc	r30, r12
 cc0:	fd 05       	cpc	r31, r13
 cc2:	ce 05       	cpc	r28, r14
 cc4:	df 05       	cpc	r29, r15
 cc6:	a0 07       	cpc	r26, r16
 cc8:	b1 07       	cpc	r27, r17
 cca:	48 f0       	brcs	.+18     	; 0xcde <__udivmod64+0x90>
 ccc:	8a 18       	sub	r8, r10
 cce:	9b 08       	sbc	r9, r11
 cd0:	ec 09       	sbc	r30, r12
 cd2:	fd 09       	sbc	r31, r13
 cd4:	ce 09       	sbc	r28, r14
 cd6:	df 09       	sbc	r29, r15
 cd8:	a0 0b       	sbc	r26, r16
 cda:	b1 0b       	sbc	r27, r17
 cdc:	21 60       	ori	r18, 0x01	; 1
 cde:	1a 94       	dec	r1
 ce0:	e1 f6       	brne	.-72     	; 0xc9a <__udivmod64+0x4c>
 ce2:	2e f4       	brtc	.+10     	; 0xcee <__udivmod64+0xa0>
 ce4:	94 01       	movw	r18, r8
 ce6:	af 01       	movw	r20, r30
 ce8:	be 01       	movw	r22, r28
 cea:	cd 01       	movw	r24, r26
 cec:	00 0c       	add	r0, r0
 cee:	08 95       	ret

00000cf0 <__ashldi3>:
 cf0:	0f 93       	push	r16
 cf2:	08 30       	cpi	r16, 0x08	; 8
 cf4:	90 f0       	brcs	.+36     	; 0xd1a <__ashldi3+0x2a>
 cf6:	98 2f       	mov	r25, r24
 cf8:	87 2f       	mov	r24, r23
 cfa:	76 2f       	mov	r23, r22
 cfc:	65 2f       	mov	r22, r21
 cfe:	54 2f       	mov	r21, r20
 d00:	43 2f       	mov	r20, r19
 d02:	32 2f       	mov	r19, r18
 d04:	22 27       	eor	r18, r18
 d06:	08 50       	subi	r16, 0x08	; 8
 d08:	f4 cf       	rjmp	.-24     	; 0xcf2 <__ashldi3+0x2>
 d0a:	22 0f       	add	r18, r18
 d0c:	33 1f       	adc	r19, r19
 d0e:	44 1f       	adc	r20, r20
 d10:	55 1f       	adc	r21, r21
 d12:	66 1f       	adc	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	0a 95       	dec	r16
 d1c:	b2 f7       	brpl	.-20     	; 0xd0a <__ashldi3+0x1a>
 d1e:	0f 91       	pop	r16
 d20:	08 95       	ret

00000d22 <__adddi3>:
 d22:	2a 0d       	add	r18, r10
 d24:	3b 1d       	adc	r19, r11
 d26:	4c 1d       	adc	r20, r12
 d28:	5d 1d       	adc	r21, r13
 d2a:	6e 1d       	adc	r22, r14
 d2c:	7f 1d       	adc	r23, r15
 d2e:	80 1f       	adc	r24, r16
 d30:	91 1f       	adc	r25, r17
 d32:	08 95       	ret

00000d34 <__cmpdi2_s8>:
 d34:	00 24       	eor	r0, r0
 d36:	a7 fd       	sbrc	r26, 7
 d38:	00 94       	com	r0
 d3a:	2a 17       	cp	r18, r26
 d3c:	30 05       	cpc	r19, r0
 d3e:	40 05       	cpc	r20, r0
 d40:	50 05       	cpc	r21, r0
 d42:	60 05       	cpc	r22, r0
 d44:	70 05       	cpc	r23, r0
 d46:	80 05       	cpc	r24, r0
 d48:	90 05       	cpc	r25, r0
 d4a:	08 95       	ret

00000d4c <__udivmodsi4>:
 d4c:	a1 e2       	ldi	r26, 0x21	; 33
 d4e:	1a 2e       	mov	r1, r26
 d50:	aa 1b       	sub	r26, r26
 d52:	bb 1b       	sub	r27, r27
 d54:	fd 01       	movw	r30, r26
 d56:	0d c0       	rjmp	.+26     	; 0xd72 <__udivmodsi4_ep>

00000d58 <__udivmodsi4_loop>:
 d58:	aa 1f       	adc	r26, r26
 d5a:	bb 1f       	adc	r27, r27
 d5c:	ee 1f       	adc	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	a2 17       	cp	r26, r18
 d62:	b3 07       	cpc	r27, r19
 d64:	e4 07       	cpc	r30, r20
 d66:	f5 07       	cpc	r31, r21
 d68:	20 f0       	brcs	.+8      	; 0xd72 <__udivmodsi4_ep>
 d6a:	a2 1b       	sub	r26, r18
 d6c:	b3 0b       	sbc	r27, r19
 d6e:	e4 0b       	sbc	r30, r20
 d70:	f5 0b       	sbc	r31, r21

00000d72 <__udivmodsi4_ep>:
 d72:	66 1f       	adc	r22, r22
 d74:	77 1f       	adc	r23, r23
 d76:	88 1f       	adc	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	1a 94       	dec	r1
 d7c:	69 f7       	brne	.-38     	; 0xd58 <__udivmodsi4_loop>
 d7e:	60 95       	com	r22
 d80:	70 95       	com	r23
 d82:	80 95       	com	r24
 d84:	90 95       	com	r25
 d86:	9b 01       	movw	r18, r22
 d88:	ac 01       	movw	r20, r24
 d8a:	bd 01       	movw	r22, r26
 d8c:	cf 01       	movw	r24, r30
 d8e:	08 95       	ret

00000d90 <__umulhisi3>:
 d90:	a2 9f       	mul	r26, r18
 d92:	b0 01       	movw	r22, r0
 d94:	b3 9f       	mul	r27, r19
 d96:	c0 01       	movw	r24, r0
 d98:	a3 9f       	mul	r26, r19
 d9a:	70 0d       	add	r23, r0
 d9c:	81 1d       	adc	r24, r1
 d9e:	11 24       	eor	r1, r1
 da0:	91 1d       	adc	r25, r1
 da2:	b2 9f       	mul	r27, r18
 da4:	70 0d       	add	r23, r0
 da6:	81 1d       	adc	r24, r1
 da8:	11 24       	eor	r1, r1
 daa:	91 1d       	adc	r25, r1
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
